buildscript {
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion"
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'

mainClassName = 'org.strangeforest.tcb.stats.TennisStatsApplication'
applicationDefaultJvmArgs = [
	'-Xms256m',
	'-Xmx256m',
	'-Dspring.profiles.active=digitalocean,jobs',
	'-Dcom.sun.management.jmxremote',
	'-Dcom.sun.management.jmxremote.port=9999',
	'-Dcom.sun.management.jmxremote.authenticate=false',
	'-Dcom.sun.management.jmxremote.ssl=false'
]

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
	itest {
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

configurations {
	itestCompile.extendsFrom testCompile
	itestRuntime.extendsFrom testRuntime
}

processResources {
	filesMatching('application.properties') {
		filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
			'info.app.version': (project.property('version') + '-' + git.head().abbreviatedId).toString()
		]
	}
}

dependencies {
	compile("org.springframework.boot:spring-boot-devtools")
	compile ('org.springframework.boot:spring-boot-starter-aop') {
		exclude group: 'org.apache.logging.log4j'
	}
	compile ('org.springframework.boot:spring-boot-starter-jdbc') {
		exclude group: 'org.apache.logging.log4j'
	}
	compile ('org.springframework.boot:spring-boot-starter-cache') {
		exclude group: 'org.apache.logging.log4j'
	}
	compile ('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.apache.logging.log4j'
		exclude group: 'org.hibernate.validator'
		exclude group: 'com.fasterxml.jackson.datatype', module: 'jackson-datatype-jdk8'
		exclude group: 'com.fasterxml.jackson.module', module: 'jackson-module-parameter-names'
	}
	compile ('org.springframework.boot:spring-boot-starter-thymeleaf') {
		exclude group: 'org.apache.logging.log4j'
	}
	compile ('org.springframework.boot:spring-boot-starter-actuator') {
		exclude group: 'org.apache.logging.log4j'
	}
	annotationProcessor ("org.springframework:spring-context-indexer:$springVersion")
	compile ("com.github.ben-manes.caffeine:caffeine:$caffeineVersion")
	compile ("com.zaxxer:HikariCP:$hikariCPVersion")
	compile ("com.neovisionaries:nv-i18n:$nvi18nVersion")
	compile ("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
	compile ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
	compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
	runtime ("org.webjars:bootstrap:$bootstrapVersion")
	runtime ("org.webjars:jquery:$jQueryVersion")
	runtime ("org.webjars:jquery-ui:$jQueryUIVersion")
	runtime ("org.webjars:jquery-ui-themes:$jQueryUIVersion")
	runtime ("org.webjars.bower:jquery-bootgrid:$jQueryBootgridVersion") {
		exclude group: 'org.webjars.bower'
	}
	runtime ("org.webjars:font-awesome:$fontAwesomeVersion")
	compile ("com.maxmind.geoip2:geoip2:$geoip2Version") {
		exclude group: 'org.apache.httpcomponents'
	}
	runtime files ('lib/GeoLite2-Country.zip')
	compile ("eu.bitwalker:UserAgentUtils:$userAgentUtilsVersion")
	runtime ("io.micrometer:micrometer-registry-prometheus:$micrometerPrometeusVersion")
	
	testCompile ('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.apache.logging.log4j'
	}
	testCompile ("org.mockito:mockito-junit-jupiter:$mockitoVersion")
}

jar {
	enabled = true
}

bootJar {
	enabled = false
}

bootDistZip {
	enabled = false
}

bootDistTar {
	enabled = false
}

task quickDeployToDigitalOcean {
	doLast {
		def version = project.property('version')
		def tennisStatsJar = "tennis-stats-${version}.jar"
		def srcPath = 'build/libs'
		def destPath = '/tcb/tennis-stats/lib'
		ssh.run {
			session(remotes.digitalOcean) {
				put from: "${srcPath}/${tennisStatsJar}", into: "${destPath}/${tennisStatsJar}.new"
				execute 'systemctl stop tennis-stats.service'
				execute "mv -f ${destPath}/${tennisStatsJar}.new ${destPath}/${tennisStatsJar}"
				execute 'systemctl start tennis-stats.service'
			}
		}
	}
}

task fullDeployToDigitalOcean {
	doLast {
		def version = project.property('version')
		def tennisStats = "tennis-stats-${version}"
		def tennisStatsDist = "${tennisStats}.tar"
		def srcPath = 'build/distributions'
		def destPath = '/tcb'
		ssh.run {
			session(remotes.digitalOcean) {
				put from: "${srcPath}/${tennisStatsDist}", into: destPath
				execute "cd ${destPath}; tar -xvf ${tennisStatsDist}; rm ${tennisStatsDist}"
				execute 'systemctl stop tennis-stats.service'
				execute "rm -rf ${destPath}/tennis-stats/bin"
				execute "rm -rf ${destPath}/tennis-stats/lib"
				execute "rm -rf ${destPath}/tennis-stats/logs/*"
				execute "rm -rf ${destPath}/tennis-stats/wrapper/logs/*"
				execute "cd ${destPath}; mv -f ${tennisStats}/* tennis-stats; rm -rf ${tennisStats}"
				execute 'systemctl start tennis-stats.service'
			}
		}
	}
}

task productionHealthCheck {
	doLast {
		def health = new groovy.json.JsonSlurper().parse(new URL('http://www.ultimatetennisstatistics.com/actuator/health'))
		println "Ultimate Tennis Statistics is ${health.status}"
		println "Disk usage: ${health.quota.blocks.pctUsed}"
	}
}

task productionInfo {
	doLast {
		def info = new groovy.json.JsonSlurper().parse(new URL('http://www.ultimatetennisstatistics.com/actuator/info'))
		println "Ultimate Tennis Statistics: ${info.app.version}"
		println "DB size: ${info.db.size}"
		println "Visitors: ${info.visitors}"
	}
}