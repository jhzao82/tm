apply plugin: 'groovy'
apply plugin: 'application'

mainClassName = 'org.strangeforest.tcb.dataload.Main'
applicationDefaultJvmArgs = [
	'-Xmx256m',
	'-Dtcb.db.url=jdbc:postgresql://localhost:5432/tcb',
	'-Dtcb.db.connections=1',
	'-Dtcb.data.base-dir=/tcb/tennis_atp'
]

sourceSets.main.resources.srcDirs = ['src/main/resources', 'src/main/db']

dependencies {
	compile (project(':crystal-ball')) {
		exclude group: 'org.jetbrains.kotlin'
	}
	compile (project(':tennis-stats')) {
		exclude group: 'org.springframework.boot'
		exclude group: 'io.micrometer'
		exclude group: 'org.thymeleaf.extras'
		exclude group: 'org.webjars'
		exclude group: 'org.webjars.bower'
		exclude group: 'com.maxmind.geoip2'
		exclude group: 'eu.bitwalker'
	}
	compile ("org.codehaus.groovy:groovy:$groovyVersion")
	compile ("org.codehaus.groovy:groovy-sql:$groovyVersion")
	compile ("org.codehaus.groovy:groovy-xml:$groovyVersion")
	compile ("org.codehaus.groovy:groovy-json:$groovyVersion")
	compile ("org.codehaus.groovy:groovy-cli-commons:$groovyVersion")
	compile ("com.xlson.groovycsv:groovycsv:$groovyCsvVersion")
	compile ("org.jsoup:jsoup:$jsoupVersion")
	compile ("org.springframework:spring-jdbc:$springVersion")
	compile ("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
	compile ("commons-cli:commons-cli:$commonsCliVersion")
	compile ("org.slf4j:slf4j-simple:$slf4jVersion")
	testCompile ("org.mockito:mockito-core:$mockitoVersion")
}

task quickDeployToDigitalOcean {
	doLast {
		def version = project.property('version')
		def dataLoadJar = "data-load-${version}.jar"
		def crystalBallJar = "crystal-ball-${version}.jar"
		def tennisStatsJar = "tennis-stats-${version}.jar"
		def srcPath = 'build/libs'
		def destPath = '/tcb/data-load/lib'
		ssh.run {
			session(remotes.digitalOcean) {
				put from: "${srcPath}/${dataLoadJar}", into: "${destPath}/${dataLoadJar}.new"
				put from: "../crystal-ball/${srcPath}/${crystalBallJar}", into: "${destPath}/${crystalBallJar}.new"
				put from: "../tennis-stats/${srcPath}/${tennisStatsJar}", into: "${destPath}/${tennisStatsJar}.new"
				execute "mv -f ${destPath}/${dataLoadJar}.new ${destPath}/${dataLoadJar}"
				execute "mv -f ${destPath}/${crystalBallJar}.new ${destPath}/${crystalBallJar}"
				execute "mv -f ${destPath}/${tennisStatsJar}.new ${destPath}/${tennisStatsJar}"
			}
		}
	}
}

task fullDeployToDigitalOcean {
	doLast {
		def version = project.property('version')
		def dataLoad = "data-load-${version}"
		def dataLoadDist = "${dataLoad}.tar"
		def srcPath = '/home/fkl/github/tennis-crystal-ball/data-load/build/distributions'
		def destPath = '/tcb'
		ssh.run {
			session(remotes.digitalOcean) {
				put from: "${srcPath}/${dataLoadDist}", into: destPath
				execute "rm -rf ${destPath}/data-load"
				execute "cd ${destPath}; tar -xvf ${dataLoadDist}; rm ${dataLoadDist}; mv ${dataLoad} data-load"
			}
		}
	}
}